// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MusicianDatabase.DAL;

namespace MusicianDatabase.DAL.Migrations
{
    [DbContext(typeof(MusicianDbContext))]
    [Migration("20201109171800_202011091817")]
    partial class _202011091817
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MusicianDatabase.Models.Band", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentSeq")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int?>("DeletedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DissolvedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastEditedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastEditedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Locked")
                        .HasColumnType("bit");

                    b.Property<int?>("LockedById")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("LastEditedById");

                    b.HasIndex("LockedById");

                    b.ToTable("Bands");
                });

            modelBuilder.Entity("MusicianDatabase.Models.ConfigEntitlement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Entitlement")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ConfigEntitlements");
                });

            modelBuilder.Entity("MusicianDatabase.Models.ConfigInstrument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Instrument")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ConfigInstrument");
                });

            modelBuilder.Entity("MusicianDatabase.Models.ConfigRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ConfigRoles");
                });

            modelBuilder.Entity("MusicianDatabase.Models.ConfigStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ConfigStatus");
                });

            modelBuilder.Entity("MusicianDatabase.Models.Musician", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int?>("DeletedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<int?>("LastEditedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastEditedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<bool>("Locked")
                        .HasColumnType("bit");

                    b.Property<int?>("LockedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("LastEditedById");

                    b.HasIndex("LockedById");

                    b.ToTable("Musicians");
                });

            modelBuilder.Entity("MusicianDatabase.Models.MusicianInstrument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConfigInstrumentId")
                        .HasColumnType("int");

                    b.Property<int>("MusicianId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConfigInstrumentId");

                    b.HasIndex("MusicianId");

                    b.ToTable("MusicianInstruments");
                });

            modelBuilder.Entity("MusicianDatabase.Models.MusicianInstrumentBand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BandId")
                        .HasColumnType("int");

                    b.Property<int>("MusicianInstrumentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BandId");

                    b.HasIndex("MusicianInstrumentId");

                    b.ToTable("MusicianInstrumentBands");
                });

            modelBuilder.Entity("MusicianDatabase.Models.RoleEntitlement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConfigEntitlementId")
                        .HasColumnType("int");

                    b.Property<int>("ConfigRoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConfigEntitlementId");

                    b.HasIndex("ConfigRoleId");

                    b.ToTable("RoleEntitlements");
                });

            modelBuilder.Entity("MusicianDatabase.Models.StatusChangeBand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionLog")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BandId")
                        .HasColumnType("int");

                    b.Property<int>("ConfigStatusId")
                        .HasColumnType("int");

                    b.Property<int>("Seq")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BandId");

                    b.HasIndex("ConfigStatusId");

                    b.HasIndex("UserId");

                    b.ToTable("StatusChangeBand");
                });

            modelBuilder.Entity("MusicianDatabase.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MusicianDatabase.Models.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConfigRoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConfigRoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("MusicianDatabase.Models.Band", b =>
                {
                    b.HasOne("MusicianDatabase.Models.User", "AddedBy")
                        .WithMany()
                        .HasForeignKey("AddedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicianDatabase.Models.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.HasOne("MusicianDatabase.Models.User", "LastEditedBy")
                        .WithMany()
                        .HasForeignKey("LastEditedById");

                    b.HasOne("MusicianDatabase.Models.User", "LockedBy")
                        .WithMany()
                        .HasForeignKey("LockedById");
                });

            modelBuilder.Entity("MusicianDatabase.Models.Musician", b =>
                {
                    b.HasOne("MusicianDatabase.Models.User", "AddedBy")
                        .WithMany()
                        .HasForeignKey("AddedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicianDatabase.Models.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.HasOne("MusicianDatabase.Models.User", "LastEditedBy")
                        .WithMany()
                        .HasForeignKey("LastEditedById");

                    b.HasOne("MusicianDatabase.Models.User", "LockedBy")
                        .WithMany()
                        .HasForeignKey("LockedById");
                });

            modelBuilder.Entity("MusicianDatabase.Models.MusicianInstrument", b =>
                {
                    b.HasOne("MusicianDatabase.Models.ConfigInstrument", "ConfigInstrument")
                        .WithMany()
                        .HasForeignKey("ConfigInstrumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicianDatabase.Models.Musician", "Musician")
                        .WithMany("MusicianInstruments")
                        .HasForeignKey("MusicianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MusicianDatabase.Models.MusicianInstrumentBand", b =>
                {
                    b.HasOne("MusicianDatabase.Models.Band", "Band")
                        .WithMany("MusicianInstrumentBands")
                        .HasForeignKey("BandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicianDatabase.Models.MusicianInstrument", "MusicianInstrument")
                        .WithMany()
                        .HasForeignKey("MusicianInstrumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MusicianDatabase.Models.RoleEntitlement", b =>
                {
                    b.HasOne("MusicianDatabase.Models.ConfigEntitlement", "ConfigEntitlement")
                        .WithMany()
                        .HasForeignKey("ConfigEntitlementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicianDatabase.Models.ConfigRole", "ConfigRole")
                        .WithMany("RoleEntitlements")
                        .HasForeignKey("ConfigRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MusicianDatabase.Models.StatusChangeBand", b =>
                {
                    b.HasOne("MusicianDatabase.Models.Band", "Band")
                        .WithMany("StatusChangeBands")
                        .HasForeignKey("BandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicianDatabase.Models.ConfigStatus", "ConfigStatus")
                        .WithMany()
                        .HasForeignKey("ConfigStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicianDatabase.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MusicianDatabase.Models.UserRole", b =>
                {
                    b.HasOne("MusicianDatabase.Models.ConfigRole", "ConfigRole")
                        .WithMany()
                        .HasForeignKey("ConfigRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicianDatabase.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
